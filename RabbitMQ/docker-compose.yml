version: '3.8'

services:
  # RabbitMQ Server
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-server
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-password}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./rabbitmq-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - rabbitmq-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Node.js Producer Service
  nodejs-producer:
    build:
      context: .
      dockerfile: Dockerfile.nodejs
      target: producer
    container_name: rabbitmq-producer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - ./examples:/app/examples:ro
      - ./config.js:/app/config.js:ro
    networks:
      - rabbitmq-network
    restart: "no"
    command: ["node", "examples/basic/producer.js"]

  # Node.js Consumer Service
  nodejs-consumer:
    build:
      context: .
      dockerfile: Dockerfile.nodejs
      target: consumer
    container_name: rabbitmq-consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - ./examples:/app/examples:ro
      - ./config.js:/app/config.js:ro
    networks:
      - rabbitmq-network
    restart: unless-stopped
    command: ["node", "examples/basic/consumer.js"]

  # Python Producer Service
  python-producer:
    build:
      context: .
      dockerfile: Dockerfile.python
      target: producer
    container_name: rabbitmq-python-producer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - ./examples/python:/app/examples/python:ro
      - ./examples/python/config.py:/app/examples/python/config.py:ro
    networks:
      - rabbitmq-network
    restart: "no"
    command: ["python", "examples/python/basic_producer.py"]

  # Python Consumer Service
  python-consumer:
    build:
      context: .
      dockerfile: Dockerfile.python
      target: consumer
    container_name: rabbitmq-python-consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - ./examples/python:/app/examples/python:ro
      - ./examples/python/config.py:/app/examples/python/config.py:ro
    networks:
      - rabbitmq-network
    restart: unless-stopped
    command: ["python", "examples/python/basic_consumer.py"]

  # Load Testing Service
  load-tester:
    build:
      context: .
      dockerfile: Dockerfile.nodejs
      target: tester
    container_name: rabbitmq-load-tester
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    volumes:
      - ./examples:/app/examples:ro
      - ./config.js:/app/config.js:ro
    networks:
      - rabbitmq-network
    restart: "no"
    command: ["node", "examples/load-test.js"]

  # Health Check Service
  healthcheck:
    build:
      context: .
      dockerfile: Dockerfile.nodejs
      target: healthcheck
    container_name: rabbitmq-healthcheck
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-admin}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-password}
    networks:
      - rabbitmq-network
    restart: "no"
    command: ["node", "healthcheck.js"]

volumes:
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local

networks:
  rabbitmq-network:
    driver: bridge
    name: rabbitmq-network

