version: '3.8'

services:
  # OAuth Application
  oauth-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_CALLBACK_URL=${GITHUB_CALLBACK_URL}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - redis
      - postgres
    networks:
      - oauth-network
    restart: unless-stopped

  # Redis for session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oauth-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL for user data storage
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=oauth_example
      - POSTGRES_USER=oauth_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-oauth_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - oauth-network
    restart: unless-stopped

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - oauth-app
    networks:
      - oauth-network
    restart: unless-stopped

  # Health check service
  healthcheck:
    build:
      context: .
      dockerfile: healthcheck.Dockerfile
    depends_on:
      - oauth-app
      - redis
      - postgres
    networks:
      - oauth-network

volumes:
  redis_data:
  postgres_data:

networks:
  oauth-network:
    driver: bridge
